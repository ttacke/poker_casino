((require '[aleph.http :as http])
)
(load-file "core.clj")
(load-file "src/pokerclient/core.clj")
(doc reader)
(reader io)
reader *in*)
(reader *in*)
(writer *out*)
(clojure.java.io.writer *out*)
(clojure.java.io/writer *out*)
(doc case)
(swap! world prn)
(swap! world (-> prn))
(swap! world (fn [w] w))
@w
@world
(swap! world (fn [w] w))
(def a [1 2 3])
a
(doto a first second rest)
(doto a #(print "first" (first %)) #(print "second" (second %)) #(print "rest" (rest %)))
(doto a #(println "first" (first %)) #(println "second" (second %)) #(println "rest" (rest %)))
(println "first")
(doc iflet)
(doc if-let)
l
(stop)
j
(doc s/take!)
(s/take! (:conn @world) ::none)
(:conn @world)
(prn world
)
(prn world)
(replstart)
(stop)
(replstart)
(stop)
(replstart)
(prn world)
(s/take! (:conn @world) ::none)
(prn world)
(s/take! (:conn @world) ::none)
(dotimes 100 (s/take! (:conn @world) ::none))
(doc repeat)
(doc dorun)
(doc dotimes)
(dotimes n 100 (s/take1 (:conn @world) ::none))
(dotimes [n 100] (s/take1 (:conn @world) ::none))
(dotimes [n 100] (s/take! (:conn @world) ::none))
(prn world)
(doc s/closed?)
(defn c [] (:conn @world))
(s/closed? (c))
(s/close! (c))
(s/closed? (c))
(replstart)
(prn world)
(replstart)
(prn world)
(replstart)
(prn world)
(s/take! (:conn @world) ::none)
(prn world)
(s/take! (:conn @world) ::none)
(s/closed? (c))
(s/take! (:conn @world) ::none)
(replstart)
(prn world)
(s/closed? (c))
(s/close! (c))
(replstart)
(stop)
(replstart)
(stop)
(replstart)
(stop)
(replstart)
(stop)
(replstart)
(stop)
(replstart)
(prn world)
(stop)
(prn world)
(replstart)
(prn world)
(stop
)
(replstart)
(stop)
(replstart)
(stop
I
)
(stop)
(replstart)
(stop)
(replstart)
(prn world)(stop)
(replstart)
(doc ifdef
)
jGjkjg
(update-in {:times 0} inc)
(doc update-in)
(update-in {:times 0} :times inc)
(update-in {:times 0} times inc)
(update-in {:times 0} :times inc)
(update {:times 0} :times inc)
(doc fn)
(sr)
sr
(replstart)
